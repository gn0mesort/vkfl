#ifndef VKFL_HPP
#define VKFL_HPP
/**
 * @file vkfl.hpp
 * @author Alexander Rothman <gnomesort@megate.ch>
 * @date December 27, 2021
 * @copyright Apache-2.0
 * @brief Dynamic Vulkan function pointer loader.
 *
 * Copyright 2021 Alexander Rothman
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <cinttypes>

#include <stdexcept>
#include <array>

#define VKFL_DEFINE_HANDLE(object) \
  struct object##_T; \
  using object = object##_T*

VKFL_DEFINE_HANDLE(VkInstance);
VKFL_DEFINE_HANDLE(VkDevice);

#if defined(_WIN32)
  #define VKFLAPI_ATTR_PRIV
  #define VKFLAPI_CALL_PRIV __stdcall
  #define VKFLAPI_PTR_PRIV VKFLAPI_CALL
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH < 7
  #error "Vulkan is not supported for the 'armeabi' NDK ABI"
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH >= 7 && defined(__ARM_32BIT_STATE)
  #define VKFLAPI_ATTR_PRIV __attribute__((pcs("aapcs-vfp")))
  #define VKFLAPI_CALL_PRIV
  #define VKFLAPI_PTR_PRIV VKFLAPI_ATTR
#else
  #define VKFLAPI_ATTR_PRIV
  #define VKFLAPI_CALL_PRIV
  #define VKFLAPI_PTR_PRIV
#endif

#ifndef VKFLAPI_CALL
  #define VKFLAPI_CALL VKFLAPI_CALL_PRIV
#endif

#ifndef VKFLAPI_ATTR
  #define VKFLAPI_ATTR VKFLAPI_ATTR_PRIV
#endif

#ifndef VKFLAPI_PTR
  #define VKFLAPI_PTR VKFLAPI_PTR_PRIV
#endif

@defines@

namespace vkfl {

  /**
   * @brief An exception type thrown by `loader` methods.
   */
  class error final : std::runtime_error {
  public:
using std::runtime_error::runtime_error;
  };

  /**
   * @brief An enumeration of all supported Vulkan command names.
   */
  enum class command {
    @commands@
  };

  /**
   * @brief Vulkan function pointer loader implementation.
   *
   * The loader is fairly simple in concept. Function pointers are loaded in three stages. First, when a new loader is
   * created globally available function pointers are loaded. Second, when `loader::load(const VkInstance)` is called
   * instance level function pointers are loaded. Third, when `loader::load(const VkDevice)` is called device level
   * function pointers are loaded. During instance level loading the instance level copies of device level function
   * pointers are loaded as well.
   *
   * Note that this loader does not have functionality to dynamically link libvulkan. The initial global loader
   * function pointer must be resolved some other way.
   *
   * Also note that this loader does not take ownership of `VkInstance` or `VkDevice` handles passed to it. If either
   * the instance of device are destroyed before the loader these may no longer be valid handles.
   */
  class loader final {
  public:
    using any_fn = void (VKFLAPI_PTR *)(void);
    using get_instance_proc_addr_fn = any_fn (VKFLAPI_PTR *)(VkInstance, const char*);
    using get_device_proc_addr_fn = any_fn (VKFLAPI_PTR *)(VkDevice, const char*);
  private:
    // Since only two handles are defined and they're both dispatchable this should be ok in any case.
    VkInstance m_loaded_instance{ nullptr };
    VkDevice m_loaded_device{ nullptr };
    std::array<any_fn, @commands_count@> m_pfns{ };

    void load_instance_fns(const VkInstance context);
    void load_device_fns(const VkInstance context);
    void load_device_fns(const VkDevice context);
  public:
    /**
     * @brief Get the VK_HEADER_VERSION from which this loader was built.
     * @returns an integer representing the header version (e.g. 203).
     */
    static constexpr std::uint32_t header_version() {
      return @header_version@;
    }

    /**
     * @brief Constructs a new `loader` object and loads the global Vulkan function pointers.
     *
     * The function pointer passed to this constructor only needs the correct signature. It doesn't matter whether it
     * is a pointer to a static `vkGetInstanceProcAddr` function, the result of a call to `dlsym`, or something else.
     * It is an error to construct a `loader` with a null loader function pointer.
     *
     * @param global A pointer to a valid Vulkan instance loader function.
     * @throws error If global is null.
     */
    loader(const get_instance_proc_addr_fn global);

    /**
     * @brief Constructs a copy of the input `loader`.
     * @param other The `loader` to copy.
     */
    loader(const loader& other) = default;

    /**
     * @brief Moves a `loader`.
     * @param other The `loader` to move.
     */
    loader(loader&& other) = default;

    /**
     * @brief Destroys a `loader`.
     */
    ~loader() noexcept = default;

    /**
     * @brief Copy one `loader` into another `loader`.
     * @param rhs The `loader` to copy.
     */
    loader& operator=(const loader& rhs) = default;

    /**
     * @brief Move one `loader` into another `loader`.
     * @param rhs The `loader` to move.
     */
    loader& operator=(loader&& rhs) = default;

    /**
     * @brief Resolve a Vulkan command into a function pointer.
     *
     * Note that the results of this method are ambiguous function pointers (i.e. pointers of the type `loader::any_fn`
     * which itself is equivalent to `PFN_vkVoidFunction`). Before using the pointers returned by this method they must
     * be cast to the correct type.
     *
     * Additionally, no attempt is made to check for null pointers. A pointer may be null either because it has not
     * been loaded or because it is part of an extension that isn't enabled/available.
     *
     * @param cmd The Vulkan command to retrieve a function pointer for.
     * @returns A pointer to the desired Vulkan command function or null.
     */
    constexpr any_fn operator()(const command cmd) const {
      return m_pfns[static_cast<std::size_t>(cmd)];
    }

    /**
     * @brief Resolve a Vulkan command into a function pointer.
     *
     * Note that the results of this method are ambiguous function pointers (i.e. pointers of the type `loader::any_fn`
     * which itself is equivalent to `PFN_vkVoidFunction`). Before using the pointers returned by this method they must
     * be cast to the correct type.
     *
     * Additionally, no attempt is made to check for null pointers. A pointer may be null either because it has not
     * been loaded or because it is part of an extension that isn't enabled/available.
     *
     * @param cmd The Vulkan command to retrieve a function pointer for.
     * @returns A pointer to the desired Vulkan command function or null.
     */
    constexpr any_fn get(const command cmd) const {
      return m_pfns[static_cast<std::size_t>(cmd)];
    }

    /**
     * @brief Load instance level function pointers.
     *
     * This method will load instance level pointers for both instance and device commands.
     *
     * Note that calling this method after loading device level pointers will overwrite those pointers with their
     * instance level equivalents.
     *
     * @param context A Vulkan instance from which instance level pointers can be loaded.
     * @returns A reference to the `loader`.
     * @throws error If context is null.
     */
    loader& load(const VkInstance context);

    /**
     * @brief Load device level function pointers.
     *
     * @param context A Vulkan device from which device level pointers can be loaded.
     * @returns A reference to the `loader`.
     * @throws error If context is null or if no instance is loaded.
     */
    loader& load(const VkDevice context);

    /**
     * @brief Get the `VkInstance` handle of the currently loaded instance.
     *
     * @returns The currently loaded `VkInstance` or a null handle if no instance is loaded.
     */
    VkInstance loaded_instance() const;

    /**
     * @brief Get the `VkDevice` handle of the currently loaded device.
     *
     * @returns The currently loaded `VkDevice` or a null handle if no device is loaded.
     */
    VkDevice loaded_device() const;

    /**
     * @brief Unload device level function pointers.
     *
     * This will reload the instance level equivalents of all device level pointers. Therefore this is equivalent to:
     *
     * `ld.load(ld.loaded_instance())`
     *
     * @returns A reference to the `loader`.
     */
    loader& unload_device();

    /**
     * @brief Unload instance level function pointers.
     *
     * As it is impossible to have a valid `VkDevice` without a corresponding instance this will clear any device level
     * functionality as well. Essentially, this method reverts the loader to the state it was in immediately after
     * construction.
     *
     * @returns A reference to the `loader`.
     */
    loader& unload_instance();
  };

}

#endif
