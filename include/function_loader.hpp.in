#ifndef VKFL_FUNCTION_LOADER_HPP
#define VKFL_FUNCTION_LOADER_HPP

/**
 * @file function_loader.hpp
 * @author Alexander Rothman <gnomesort@megate.ch>
 * @date December 27, 2021
 * @brief Dynamic Vulkan function pointer loader.
 *
 * This is intended to be a low-level component and so very few checks are made to ensure proper operation. Care should
 * be taken to ensure devices and instances are loaded in a sane way.
 */

#include <cinttypes>

#include <stdexcept>
#include <array>

// If the usual Vulkan loader hasn't already been included; include the loader without prototypes.
// Prototypes don't cause a conflict but they are unnecessary here.
#ifndef VULKAN_H_
  #define VK_NO_PROTOTYPES 1
  #include <vulkan/vulkan.h>
  #undef VK_NO_PROTOTYPES
#endif

@undefs@

namespace vkfl {
/**
 * @brief A namespace containing snake_case aliases of various Vulkan PFN_vk* pointers.
 */
namespace function_pointer {

  using any = PFN_vkVoidFunction;
@aliasfns@

}
  /**
   * @brief An exception type thrown by `loader` methods.
   */
  class error final : std::runtime_error {
  public:
    using std::runtime_error::runtime_error;
  };

  /**
   * @brief An enumeration of all supported Vulkan command names.
   */
  enum class command {
@commands@
  };

  /**
   * @brief Vulkan function pointer loader implementation.
   *
   * The loader is fairly simple in concept. Function pointers are loaded in three stages. First, when a new loader is
   * created globally available function pointers are loaded. Second, when `loader::load(const VkInstance)` is called
   * instance level function pointers are loaded. Third, when `loader::load(const VkDevice)` is called device level
   * function pointers are loaded. During instance level loading the instance level copies of device level function
   * pointers are loaded as well.
   *
   * Note that this loader does not have functionality to dynamically link libvulkan. The initial global loader
   * function pointer must be resolved some other way.
   *
   * Also note that this loader does not take ownership of `VkInstance` or `VkDevice` handles passed to it. If either
   * the instance of device are destroyed before the loader these may no longer be valid handles.
   */
  class loader final {
  private:
    VkInstance m_loaded_instance{ VK_NULL_HANDLE };
    VkDevice m_loaded_device{ VK_NULL_HANDLE };
    std::array<function_pointer::any, @commands_count@> m_pfns{ };
  public:
    /**
     * @brief Get the VK_HEADER_VERSION from which this loader was built.
     * @returns an integer representing the header version (e.g. 203).
     */
    static constexpr std::uint32_t header_version() {
      return @header_version@;
    }

    /**
     * @brief Constructs a new `loader` object and loads the global Vulkan function pointers.
     *
     * The function pointer passed to this constructor only needs the correct signature. It doesn't matter whether it
     * is a pointer to a static `vkGetInstanceProcAddr` function, the result of a call to `dlsym`, or something else.
     * It is an error to construct a `loader` with a null loader function pointer.
     *
     * @param global A pointer to a valid Vulkan instance loader function.
     * @throws error If global is null.
     */
    loader(const function_pointer::get_instance_proc_addr global);

    /**
     * @brief Constructs a copy of the input `loader`.
     * @param other The `loader` to copy.
     */
    loader(const loader& other) = default;

    /**
     * @brief Moves a `loader`.
     * @param other The `loader` to move.
     */
    loader(loader&& other) = default;

    /**
     * @brief Destroys a `loader`.
     */
    ~loader() noexcept = default;

    /**
     * @brief Copy one `loader` into another `loader`.
     * @param rhs The `loader` to copy.
     */
    loader& operator=(const loader& rhs) = default;

    /**
     * @brief Move one `loader` into another `loader`.
     * @param rhs The `loader` to move.
     */
    loader& operator=(loader&& rhs) = default;

    /**
     * @brief Resolve a Vulkan command into a function pointer.
     *
     * Note that the results of this method are ambiguous function pointers (i.e. pointers of the type
     * `function_pointer::any` which itself is an alias of `PFN_vkVoidFunction`). Before using the pointers returned by
     * this method they must be cast to the correct type.
     *
     * Additionally, no attempt is made to check for null pointers. A pointer may be null either because it has not
     * been loaded or because it is part of an extension that isn't enabled/available.
     *
     * @param cmd The Vulkan command to retrieve a function pointer for.
     * @returns A pointer to the desired Vulkan command function or null.
     */
    function_pointer::any operator()(const command cmd) const;

    /**
     * @brief Resolve a Vulkan command into a function pointer.
     *
     * Note that the results of this method are ambiguous function pointers (i.e. pointers of the type
     * `function_pointer::any` which itself is an alias of `PFN_vkVoidFunction`). Before using the pointers returned by
     * this method they must be cast to the correct type.
     *
     * Additionally, no attempt is made to check for null pointers. A pointer may be null either because it has not
     * been loaded or because it is part of an extension that isn't enabled/available.
     *
     * @param cmd The Vulkan command to retrieve a function pointer for.
     * @returns A pointer to the desired Vulkan command function or null.
     */
    function_pointer::any get(const command) const;

    /**
     * @brief Load instance level function pointers.
     *
     * This method will load instance level pointers for both instance and device commands.
     *
     * Note that calling this method after loading device level pointers will overwrite those pointers with their
     * instance level equivalents.
     *
     * @param context A Vulkan instance from which instance level pointers can be loaded.
     * @returns A reference to the `loader`.
     * @throws error If context is null.
     */
    loader& load(const VkInstance context);

    /**
     * @brief Load device level function pointers.
     *
     * @param context A Vulkan device from which device level pointers can be loaded.
     * @returns A reference to the `loader`.
     * @throws error If context is null.
     */
    loader& load(const VkDevice context);

    /**
     * @brief Get the `VkInstance` handle of the currently loaded instance.
     *
     * @returns The currently loaded `VkInstance` or a null handle if no instance is loaded.
     */
    VkInstance loaded_instance() const;

    /**
     * @brief Get the `VkDevice` handle of the currently loaded device.
     *
     * @returns The currently loaded `VkDevice` or a null handle if no device is loaded.
     */
    VkDevice loaded_device() const;
  };

}

#endif
